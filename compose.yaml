version: '3.8'

services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    labels:
      - com.github.nginx-proxy.nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
    networks:
      - runquest

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: nginx-acme
    depends_on:
      - nginx-proxy
    environment:
      - DEFAULT_EMAIL=${DEFAULT_EMAIL}
      - NGINX_PROXY_CONTAINER=${NGINX_PROXY_CONTAINER}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - acme:/etc/acme.sh
    networks:
      - runquest

  api:
    build:
      context: .
    container_name: runquest-api
    expose:
      - "8080"
    environment:
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - API_PORT=${API_PORT}
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - runquest

  db:
    image: postgres:latest
    container_name: runquest-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - runquest

volumes:
  db-data:
  nginx_certs:
  nginx_vhost:
  nginx_html:
  acme:

networks:
  runquest:
    driver: bridge
